<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [demo\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image demo\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Jan  4 21:20:30 2023
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12e]">port_int_disable</a>
 <LI><a href="#[12f]">port_int_enable</a>
 <LI><a href="#[10a]">port_cpsr_save</a>
 <LI><a href="#[109]">port_cpsr_restore</a>
 <LI><a href="#[108]">port_clz</a>
 <LI><a href="#[a9]">port_sched_start</a>
 <LI><a href="#[a3]">port_context_switch</a>
 <LI><a href="#[a7]">port_irq_context_switch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4a]">knl_idle_entry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">knl_idle_entry</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[4c]">fputc</a> from usart.o(.text.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[4a]">knl_idle_entry</a> from tos_sys.o(.text.knl_idle_entry) referenced 2 times from tos_sys.o(.text.knl_idle_init)
 <LI><a href="#[46]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4d]">task1</a> from main.o(.text.task1) referenced from main.o(.rodata.os_thread_def_task1)
 <LI><a href="#[4e]">task2</a> from main.o(.text.task2) referenced from main.o(.rodata.os_thread_def_task2)
 <LI><a href="#[4b]">task_exit</a> from tos_task.o(.text.task_exit) referenced 2 times from tos_task.o(.text.tos_task_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[129]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[109]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[108]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[a9]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[a3]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[a7]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[122]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[133]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[134]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[135]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[71]"></a>HAL_DMA_Abort</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[7e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[59]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[84]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5a]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>HAL_InitTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[5d]"></a>HAL_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[60]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[5f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[5b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[66]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[69]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[68]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[67]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 780 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[76]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_UART_MspInit</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[7b]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>MX_GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SystemClock_Config</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[a4]"></a>cpu_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[a6]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[a8]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[a5]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(.text.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[121]"></a>cpu_task_stk_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tos_cpu.o(.text.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[ae]"></a>knl_idle_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tos_sys.o(.text.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[e3]"></a>knl_is_idle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[b1]"></a>knl_is_inirq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[b2]"></a>knl_is_sched_locked</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[b5]"></a>knl_is_self</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[b0]"></a>knl_sched</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tos_sys.o(.text.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bb]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[c0]"></a>mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_mutex.o(.text.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[c2]"></a>osDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osDelay &rArr; tos_task_delay &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[b7]"></a>osKernelInitialize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>osKernelStart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>osThreadCreate</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, cmsis_os.o(.text.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_pend.o(.text.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>

<P><STRONG><a name="[ce]"></a>pend_list_adjust</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_pend.o(.text.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pend_list_adjust &rArr; pend_list_add &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[d0]"></a>pend_list_remove</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(.text.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_remove &rArr; tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_reset_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[d2]"></a>pend_task_wakeup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tos_pend.o(.text.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_suspended
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[c1]"></a>pend_wakeup_all</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_pend.o(.text.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[ab]"></a>port_systick_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, port_c.o(.text.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[aa]"></a>port_systick_priority_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, port_c.o(.text.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_systick_priority_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[d7]"></a>readyqueue_add</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[d9]"></a>readyqueue_add_head</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head &rArr; tos_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[d8]"></a>readyqueue_add_tail</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[b4]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[de]"></a>readyqueue_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tos_sched.o(.text.readyqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[e2]"></a>readyqueue_remove</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tos_sched.o(.text.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_remove
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[10b]"></a>soft_timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(.text.soft_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[e6]"></a>soft_timer_update</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tos_timer.o(.text.soft_timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = soft_timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[4d]"></a>task1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = task1 &rArr; osDelay &rArr; tos_task_delay &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.os_thread_def_task1)
</UL>
<P><STRONG><a name="[4e]"></a>task2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = task2 &rArr; osDelay &rArr; tos_task_delay &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.os_thread_def_task2)
</UL>
<P><STRONG><a name="[ad]"></a>task_free_all</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_task.o(.text.task_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>

<P><STRONG><a name="[fc]"></a>tick_list_add</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_tick.o(.text.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_sleeping
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[d5]"></a>tick_list_remove</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_tick.o(.text.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_reset_sleeping
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[104]"></a>tick_update</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tos_tick.o(.text.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[ac]"></a>tos_cpu_clz</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text.tos_cpu_clz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>

<P><STRONG><a name="[b6]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[b3]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[c6]"></a>tos_knl_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[86]"></a>tos_knl_irq_enter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>tos_knl_irq_leave</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[85]"></a>tos_knl_is_running</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sys.o(.text.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[e7]"></a>tos_knl_sched_lock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>

<P><STRONG><a name="[ea]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>

<P><STRONG><a name="[c7]"></a>tos_knl_start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tos_sys.o(.text.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[c3]"></a>tos_millisec2tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_time.o(.text.tos_millisec2tick))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[f8]"></a>tos_mmheap_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tos_mmheap.o(.text.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_from_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>

<P><STRONG><a name="[bc]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tos_mmheap.o(.text.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_record
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_full
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_down
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[af]"></a>tos_task_create</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, tos_task.o(.text.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_ready
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_set_static
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[c4]"></a>tos_task_delay</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_task.o(.text.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[f6]"></a>tos_task_destroy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_is_static
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[bf]"></a>tos_task_prio_change</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[124]"></a>tos_task_yield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tos_task.o(.text.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[87]"></a>tos_tick_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_tick.o(.text.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[126]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[136]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[eb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[137]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[138]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[73]"></a>UART_EndRxTransfer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>UART_Receive_IT</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>UART_SetConfig</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[72]"></a>UART_Transmit_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[6c]"></a>RCC_Delay</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(.text.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[63]"></a>NVIC_EncodePriority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[6d]"></a>SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[61]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[62]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[64]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[65]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[82]"></a>SysTick_Config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, port_c.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[83]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port_c.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[8d]"></a>__fls</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_mmheap.o(.text.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[11b]"></a>align_down</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(.text.align_down))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[8f]"></a>blk_absorb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[118]"></a>blk_from_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_from_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[92]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[9a]"></a>blk_is_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_is_free))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[9d]"></a>blk_is_prev_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_is_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[91]"></a>blk_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[96]"></a>blk_mark_as_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(.text.blk_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[99]"></a>blk_merge_next</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_free
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[9c]"></a>blk_merge_prev</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prev
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_is_prev_free
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[95]"></a>blk_next</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[9e]"></a>blk_prev</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_prev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[9b]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(.text.blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[98]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[97]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[11d]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[11c]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[11e]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[90]"></a>blk_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[9f]"></a>blk_to_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[8e]"></a>generic_fls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_mmheap.o(.text.generic_fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>

<P><STRONG><a name="[94]"></a>insert_free_block</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tos_mmheap.o(.text.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[93]"></a>mapping_insert</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[ba]"></a>mmheap_ctl_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_mmheap.o(.text.mmheap_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmheap_ctl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[11a]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tos_mmheap.o(.text.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[119]"></a>mmheap_pool_is_full</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_mmheap.o(.text.mmheap_pool_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[11f]"></a>mmheap_pool_record</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_mmheap.o(.text.mmheap_pool_record))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[a0]"></a>offset_to_blk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mmheap.o(.text.offset_to_blk))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[a1]"></a>remove_free_block</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tos_mmheap.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
</UL>

<P><STRONG><a name="[112]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[bd]"></a>mutex_old_owner_release</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_mutex.o(.text.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[be]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_mutex.o(.text.tos_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[10f]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[113]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[cb]"></a>pend_list_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_pend.o(.text.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_add &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[d3]"></a>task_state_is_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[d4]"></a>task_state_is_sleeping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_is_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[d6]"></a>task_state_is_suspended</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[d1]"></a>task_state_reset_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_reset_pending))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>

<P><STRONG><a name="[cd]"></a>task_state_set_pend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_pend.o(.text.task_state_set_pend))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>

<P><STRONG><a name="[cc]"></a>tos_list_add_tail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(.text.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>

<P><STRONG><a name="[cf]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(.text.tos_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[ca]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[10c]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
</UL>

<P><STRONG><a name="[114]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[e0]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[e1]"></a>readyqueue_prio_insert</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_prio_insert))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>

<P><STRONG><a name="[db]"></a>readyqueue_prio_mark</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_sched.o(.text.readyqueue_prio_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readyqueue_prio_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[e5]"></a>readyqueue_prio_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_sched.o(.text.readyqueue_prio_remove))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[dc]"></a>tos_list_add</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_sched.o(.text.tos_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[dd]"></a>tos_list_add_tail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_sched.o(.text.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>

<P><STRONG><a name="[e4]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_sched.o(.text.tos_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[da]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[df]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>

<P><STRONG><a name="[4a]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(.text.knl_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = knl_idle_entry &rArr;  knl_idle_entry (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(.text.knl_idle_init)
</UL>
<P><STRONG><a name="[10e]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
</UL>

<P><STRONG><a name="[115]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[125]"></a>knl_object_alloc_is_static</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_is_static))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[fa]"></a>knl_object_alloc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[120]"></a>knl_object_alloc_set_static</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.knl_object_alloc_set_static))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[ed]"></a>task_do_destroy</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tos_task.o(.text.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_set_deleted
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_sleeping
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_pending
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[4b]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(.text.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(.text.tos_task_create)
</UL>
<P><STRONG><a name="[f7]"></a>task_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_task.o(.text.task_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[f9]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_task.o(.text.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[ef]"></a>task_mutex_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_task.o(.text.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[f4]"></a>task_reset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tos_task.o(.text.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_alloc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[f2]"></a>task_state_is_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[f0]"></a>task_state_is_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[f1]"></a>task_state_is_sleeping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_is_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[f5]"></a>task_state_set_deleted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_set_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[123]"></a>task_state_set_ready</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_task.o(.text.task_state_set_ready))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[10d]"></a>tos_list_add</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(.text.tos_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[f3]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_task.o(.text.tos_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[ee]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[fb]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[110]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_tick.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[116]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_tick.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[100]"></a>task_state_reset_sleeping</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_tick.o(.text.task_state_reset_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[fe]"></a>task_state_set_sleeping</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_tick.o(.text.task_state_set_sleeping))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[fd]"></a>tick_task_place</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tos_tick.o(.text.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[ff]"></a>tick_task_takeoff</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tos_tick.o(.text.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[101]"></a>tos_list_add_tail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_tick.o(.text.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>

<P><STRONG><a name="[103]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_tick.o(.text.tos_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[102]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_tick.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[111]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_timer.o(.text._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[117]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_timer.o(.text._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>

<P><STRONG><a name="[e9]"></a>timer_place</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tos_timer.o(.text.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>

<P><STRONG><a name="[e8]"></a>timer_takeoff</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tos_timer.o(.text.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_update
</UL>

<P><STRONG><a name="[105]"></a>tos_list_add_tail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_timer.o(.text.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>

<P><STRONG><a name="[106]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_timer.o(.text.tos_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tos_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[107]"></a>tos_list_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_timer.o(.text.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[c5]"></a>errno_knl2cmsis</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(.text.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[c8]"></a>priority_cmsis2knl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(.text.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[127]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
